# Dockerfile for testing Dock2Tauri Makefile commands in isolation
# Tests all make targets in a clean Fedora environment

FROM fedora:38

# Set environment variables for non-interactive installation
ENV DEBIAN_FRONTEND=noninteractive
ENV RUST_BACKTRACE=1
ENV CARGO_HOME=/usr/local/cargo
ENV RUSTUP_HOME=/usr/local/rustup
ENV PATH="/usr/local/cargo/bin:${PATH}"

# Install system dependencies
RUN dnf update -y && \
    dnf groupinstall -y "Development Tools" && \
    dnf install -y \
        curl \
        wget \
        git \
        pkgconf-pkg-config \
        gtk3-devel \
        libappindicator-gtk3 \
        librsvg2-tools \
        patchelf \
        file \
        rpm-build \
        rpm \
        webkit2gtk4.1-devel \
        libsoup3-devel \
        javascriptcoregtk4.1-devel \
        glib2-devel \
        cairo-devel \
        pango-devel \
        gdk-pixbuf2-devel \
        atk-devel \
        python3 \
        python3-pip \
        nodejs \
        npm \
        docker \
        make \
        bash \
        which \
        lsof \
        procps-ng && \
    dnf clean all

# Install Rust toolchain
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && \
    source $CARGO_HOME/env && \
    rustup default stable && \
    rustup target add x86_64-unknown-linux-gnu

# Install Tauri CLI
RUN source $CARGO_HOME/env && \
    cargo install tauri-cli --version "^2.0.0"

# Install Node.js dependencies for testing
RUN npm install -g @playwright/test cypress

# Create test user (avoid running as root)
RUN useradd -m -u 1000 testuser && \
    usermod -aG docker testuser && \
    echo "testuser ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# Set up working directory
WORKDIR /workspace
COPY . /workspace
RUN chown -R testuser:testuser /workspace

# Switch to test user
USER testuser

# Source Rust environment for all users
RUN echo 'source $CARGO_HOME/env' >> ~/.bashrc

# Test script that runs all Makefile targets
COPY <<EOF /workspace/test-makefile.sh
#!/bin/bash
set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${BLUE}[INFO]${NC} \$1"; }
log_success() { echo -e "${GREEN}[PASS]${NC} \$1"; }
log_warning() { echo -e "${YELLOW}[WARN]${NC} \$1"; }
log_error() { echo -e "${RED}[FAIL]${NC} \$1"; }

# Source Rust environment
source $CARGO_HOME/env

# Test results tracking
PASSED_TESTS=()
FAILED_TESTS=()

test_make_target() {
    local target="\$1"
    local description="\$2"
    local timeout="\${3:-60}"
    
    log_info "Testing: make \$target (\$description)"
    
    if timeout "\$timeout" make "\$target" > "/tmp/make_\$target.log" 2>&1; then
        log_success "‚úÖ make \$target - \$description"
        PASSED_TESTS+=("\$target")
    else
        log_error "‚ùå make \$target - \$description"
        FAILED_TESTS+=("\$target")
        echo "Error output:"
        tail -20 "/tmp/make_\$target.log" | sed 's/^/  /'
    fi
}

# Test all make targets
log_info "=== TESTING DOCK2TAURI MAKEFILE TARGETS ==="

# Basic targets
test_make_target "help" "Show help information" 10
test_make_target "clean" "Clean build artifacts" 30

# Dependency and setup targets
test_make_target "install-deps-dry-run" "Dry run dependency installation" 30
test_make_target "test-install" "Validate install scripts" 30

# Port management
test_make_target "kill-port" "Kill process on port 8081" 10

# Testing targets
test_make_target "test-setup" "Setup test dependencies" 120
test_make_target "test-bash" "Run Bash script tests" 60
test_make_target "test-clean" "Clean test outputs" 30

# Build targets (may take longer)
# test_make_target "build" "Build production version" 600  # Skip in container
# test_make_target "dev" "Start development mode" 30       # Skip - needs GUI

# Final summary
echo
log_info "=== TEST SUMMARY ==="
log_success "Passed: \${#PASSED_TESTS[@]}"
if [ \${#FAILED_TESTS[@]} -gt 0 ]; then
    log_error "Failed: \${#FAILED_TESTS[@]}"
    echo
    log_error "Failed tests:"
    for test in "\${FAILED_TESTS[@]}"; do
        log_error "  - \$test"
    done
    exit 1
else
    log_success "All tests passed! üéâ"
    exit 0
fi
EOF

RUN chmod +x /workspace/test-makefile.sh

# Start Docker daemon (if needed for testing)
# Note: This requires privileged mode when running the container

# Default command
CMD ["/workspace/test-makefile.sh"]
